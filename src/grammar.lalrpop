use crate::tok::{self, Tok};
use crate::ast;

grammar<'input>();

pub Program: ast::Program = {
    <definitions:Definition*> => ast::Program { definitions },
}

Definition: ast::Definition = {
    FunctionDefinition,
    ConstDefinition,
}

Ident: ast::Ident = {
    <i:"Id"> => i.into(),
}

FunctionDefinition: ast::Definition = {
    <location:@L> <is_inline:"inline"?> "fn" <name:Ident> <arg:Params> <returns:("->" ReturnType)?> <block:StatementBlock> => {
        let returns = match returns {
            None => ast::ReturnType::Nothing,
            Some((_, rt)) => rt,
        };
        let node = if is_inline.is_none() {
            ast::DefinitionKind::Function { name, arg, returns, body: vec![block] }
        } else {
            // TODO: error if there are any args or returns
            ast::DefinitionKind::InlineFunction { name, body: vec![block] }
        };
        ast::Definition::new(location, node)
    }
}

ConstDefinition: ast::Definition = {
    <location:@L> "const" <name:Ident> "=" <value:Integer> ";" => {
        let node = ast::DefinitionKind::Const { name, value };
        ast::Definition::new(location, node)
    }
}

Params: ast::ArgumentType = {
    "(" <arg:ArgumentType?> ")" => {
        arg.unwrap_or(ast::ArgumentType::Nothing)
    }
}

ReturnType: ast::ReturnType = {
    "arg" => ast::ReturnType::Argument,
    "state" => ast::ReturnType::State,
}

ArgumentType: ast::ArgumentType = {
    "arg" => ast::ArgumentType::Argument,
    "state" => ast::ArgumentType::State,
}

StatementBlock: ast::Statement = {
    <location:@L> "{" <body:Statement*> "}" => {
        ast::Statement::new(
            location,
            ast::StatementKind::StatementBlock { body }
        )
    }
}

Statement: ast::Statement = {
    <s:SingleStatement> ";" => s,
    StatementBlock,
    LoopStatement,
    WhileStatement,
    IfStatement,
}

SingleStatement: ast::Statement = {
    FunctionCallStatement,
    ReturnStatement,
    InlineCodeStatement,
}

InlineCodeStatement: ast::Statement = {
    <location:@L> <body:InlineCode> => {
        let node = ast::StatementKind::InlineCode { body };
        ast::Statement::new(location, node)
    }
}

InlineCode: ast::InlineCode = {
    "__code__" "(" <code:"StringLiteral"> ")" => ast::InlineCode { code: code.into() }
}

ReturnStatement: ast::Statement = {
    <location:@L> "return" => {
        ast::Statement::new(location, ast::StatementKind::Return { expr: None })
    },
    <location:@L> "return" <expr:Expr> => {
        ast::Statement::new(location, ast::StatementKind::Return { expr: Some(expr) })
    },
}


FunctionCallStatement: ast::Statement = {
    <location:@L> <name:Ident> "(" ")" => {
        let node = ast::StatementKind::FunctionCall { name };
        ast::Statement { location, node }
    }
}

LoopStatement: ast::Statement = {
    <location:@L> "loop" <block:StatementBlock> => {
        let node = ast::StatementKind::Loop { body: vec![block] };
        ast::Statement::new(location, node)
    }
}

WhileStatement: ast::Statement = {
    <location:@L> "while" <negative:"!"?> <condition:Expr> <block:StatementBlock> => {
        let negative = negative.is_some();
        let node = ast::StatementKind::While { condition, body: vec![block], negative };
        ast::Statement::new(location, node)
    }
}

IfStatement: ast::Statement = {
    <location:@L> "if" <negative:"!"?> <condition:Expr> <block:StatementBlock> <orelse:("else" Statement)?> => {
        let orelse = match orelse {
            Some((_, stmt)) => vec![stmt],
            None => vec![],
        };
        let negative = negative.is_some();
        let node = ast::StatementKind::If { condition, body: vec![block], orelse, negative };
        ast::Statement::new(location, node)
    }
}

Expr: Box<ast::Expr> = {
    FunctionCallResultExpr => Box::new(<>),
    VariableComparisonExpr => Box::new(<>),
    InlineCodeExpr => Box::new(<>),
    "(" <c:Expr> ")" => c,
}


InlineCodeExpr: ast::Expr = {
     <location:@L> <body:InlineCode> => {
         let node = ast::ExprKind::InlineCode { body };
         ast::Expr::new(location, node)
     }
}

FunctionCallResultExpr: ast::Expr = {
    <location:@L> <name:Ident> "(" ")" => {
        // TODO: check that function returns an argument or a state.
        let node = ast::ExprKind::FunctionCallResult { name };
        ast::Expr::new(location, node)
    }
}

VariableComparisonExpr: ast::Expr = {
    <location:@L> <var:Variable> <op:ComparisonOp> <value:IntegerExpr> => {
        let node = ast::ExprKind::VariableComparison { var, value, op };
        ast::Expr::new(location, node)
    }
}

IntegerExpr: ast::IntegerExpr = {
    <value:Integer> => ast::IntegerExpr::Literal { value },
    <name:Ident> => ast::IntegerExpr::Const { name },
}

Variable: ast::Variable = {
    <v:"Var"> => ast::Variable { name: v.into() }
}

ComparisonOp: ast::ComparisonOp = {
    "==" => ast::ComparisonOp::Eq,
    "!=" => ast::ComparisonOp::NotEq,
    ">" => ast::ComparisonOp::GreaterThan,
    "<" => ast::ComparisonOp::LessThan,
    ">=" => ast::ComparisonOp::GreaterOrEqual,
    "<=" => ast::ComparisonOp::LessOrEqual,
}

Integer: ast::Integer = {
    <i:"Integer"> => i,
}

extern {
    type Location = usize;
    type Error = tok::Error;

    enum Tok<'input> {
        "fn" => Tok::Fn,
        "inline" => Tok::Inline,
        "return" => Tok::Return,
        "repeat" => Tok::Repeat,
        "loop" => Tok::Loop,
        "if" => Tok::If,
        "else" => Tok::Else,
        "while" => Tok::While,
        "arg" => Tok::Arg,
        "state" => Tok::State,
        "__code__" => Tok::InlineCode,
        "const" => Tok::Const,

        "Id" => Tok::Id(<&'input str>),
        "Var" => Tok::Var(<&'input str>),
        "StringLiteral" => Tok::StringLiteral(<&'input str>),
        "Integer" => Tok::Integer(<u32>),

        "(" => Tok::LeftParen,
        ")" => Tok::RightParen,
        "{" => Tok::LeftBrace,
        "}" => Tok::RightBrace,
        ";" => Tok::Semi,
        "<" => Tok::LessThan,
        ">" => Tok::GreaterThan,
        "==" => Tok::Equal,
        "!=" => Tok::NotEqual,
        "<=" => Tok::LessOrEqual,
        ">=" => Tok::GreaterOrEqual,
        "!" => Tok::Bang,
        "->" => Tok::RightArrow,
        "=" => Tok::Assign,
    }
}